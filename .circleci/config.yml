version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.0
  kubernetes: circleci/kubernetes@0.3.0

jobs:
  lint:
    docker:
      - image: node:16
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            make install
      - run:
          name: run lint
          command: |
            make lint

  build-and-push-image:
    environment:
      IMAGE_NAME: capstone
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME .
            docker image ls
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            docker login -u "${DOCKERHUB_USERNAME}" -p "${DOCKERHUB_PASSWORD}"
            docker tag $IMAGE_NAME:latest ${DOCKERPATH}:${DOCKER_TAG}
            docker image ls
            docker push ${DOCKERPATH}:${DOCKER_TAG}

  create-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t3.medium
          nodes-max: 6
          ssh-access: false
          ssh-public-key: ''
      - run:
          name: Test cluster
          command: |
            kubectl get services

  create-k8s-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-cluster

  update-container-image:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Update the image of deployment pods one at a time
          command: |
            aws eks --region us-east-2 update-kubeconfig --name capstone-cluster
            kubectl get svc
            kubectl get pods
            kubectl set image deployment/capstone-cluster capstone=nicomwang/udacity-capstone:${DOCKER_TAG} 

workflows:
  default:
    jobs:
      - lint
      - build-and-push-image:
          requires:
            - lint
      - create-eks-cluster:
          cluster-name: capstone-cluster
      - create-k8s-deployment:
          cluster-name: capstone-cluster
          requires:
            - create-eks-cluster
      - update-container-image:
          cluster-name: capstone-cluster
          requires:
            - create-k8s-deployment
            - build-and-push-image
